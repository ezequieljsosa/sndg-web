# Generated by Django 2.0 on 2018-07-13 18:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Biodatabase',
            fields=[
                ('biodatabase_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('authority', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'biodatabase',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bioentry',
            fields=[
                ('bioentry_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('accession', models.CharField(max_length=128)),
                ('identifier', models.CharField(blank=True, max_length=40, null=True)),
                ('division', models.CharField(blank=True, max_length=6, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('version', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'bioentry',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioentryPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bioentry_path',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioentryQualifierValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('rank', models.IntegerField()),
            ],
            options={
                'db_table': 'bioentry_qualifier_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioentryRelationship',
            fields=[
                ('bioentry_relationship_id', models.AutoField(primary_key=True, serialize=False)),
                ('rank', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bioentry_relationship',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('comment_text', models.TextField()),
                ('rank', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dbxref',
            fields=[
                ('dbxref_id', models.AutoField(primary_key=True, serialize=False)),
                ('dbname', models.CharField(max_length=40)),
                ('accession', models.CharField(max_length=128)),
                ('version', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'dbxref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_pos', models.IntegerField(blank=True, null=True)),
                ('end_pos', models.IntegerField(blank=True, null=True)),
                ('strand', models.IntegerField()),
                ('rank', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'location',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ontology',
            fields=[
                ('ontology_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('definition', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ontology',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('reference_id', models.AutoField(primary_key=True, serialize=False)),
                ('location', models.TextField()),
                ('title', models.TextField(blank=True, null=True)),
                ('authors', models.TextField(blank=True, null=True)),
                ('crc', models.CharField(blank=True, max_length=32, null=True, unique=True)),
            ],
            options={
                'db_table': 'reference',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Seqfeature',
            fields=[
                ('seqfeature_id', models.AutoField(primary_key=True, serialize=False)),
                ('display_name', models.CharField(blank=True, max_length=64, null=True)),
                ('rank', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'seqfeature',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeqfeaturePath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'seqfeature_path',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeqfeatureRelationship',
            fields=[
                ('seqfeature_relationship_id', models.AutoField(primary_key=True, serialize=False)),
                ('rank', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'seqfeature_relationship',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('taxon_id', models.AutoField(primary_key=True, serialize=False)),
                ('ncbi_taxon_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('parent_taxon_id', models.PositiveIntegerField(blank=True, null=True)),
                ('node_rank', models.CharField(blank=True, max_length=32, null=True)),
                ('genetic_code', models.PositiveIntegerField(blank=True, null=True)),
                ('mito_genetic_code', models.PositiveIntegerField(blank=True, null=True)),
                ('left_value', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('right_value', models.PositiveIntegerField(blank=True, null=True, unique=True)),
            ],
            options={
                'db_table': 'taxon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('term_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('identifier', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('is_obsolete', models.CharField(blank=True, max_length=1, null=True)),
            ],
            options={
                'db_table': 'term',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermPath',
            fields=[
                ('term_path_id', models.AutoField(primary_key=True, serialize=False)),
                ('distance', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'term_path',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermRelationship',
            fields=[
                ('term_relationship_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'term_relationship',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioentryDbxref',
            fields=[
                ('bioentry', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Bioentry')),
                ('rank', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bioentry_dbxref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BioentryReference',
            fields=[
                ('bioentry', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Bioentry')),
                ('start_pos', models.IntegerField(blank=True, null=True)),
                ('end_pos', models.IntegerField(blank=True, null=True)),
                ('rank', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'bioentry_reference',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Biosequence',
            fields=[
                ('bioentry', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Bioentry')),
                ('version', models.SmallIntegerField(blank=True, null=True)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('alphabet', models.CharField(blank=True, max_length=10, null=True)),
                ('seq', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'biosequence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DbxrefQualifierValue',
            fields=[
                ('dbxref', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Dbxref')),
                ('rank', models.SmallIntegerField()),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'dbxref_qualifier_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LocationQualifierValue',
            fields=[
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Location')),
                ('value', models.CharField(max_length=255)),
                ('int_value', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'location_qualifier_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeqfeatureDbxref',
            fields=[
                ('seqfeature', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Seqfeature')),
                ('rank', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'seqfeature_dbxref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeqfeatureQualifierValue',
            fields=[
                ('seqfeature', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Seqfeature')),
                ('rank', models.SmallIntegerField()),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'seqfeature_qualifier_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaxonName',
            fields=[
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='biosql.Taxon')),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name_class', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'taxon_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermDbxref',
            fields=[
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Term')),
                ('rank', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'term_dbxref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermRelationshipTerm',
            fields=[
                ('term_relationship', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.TermRelationship')),
            ],
            options={
                'db_table': 'term_relationship_term',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermSynonym',
            fields=[
                ('synonym', models.CharField(max_length=255)),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='biosql.Term')),
            ],
            options={
                'db_table': 'term_synonym',
                'managed': False,
            },
        ),
    ]
